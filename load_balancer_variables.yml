---

##
# Ensures that an ELB load balancer exists for the Data Servers in each
# environment.
##

- name: Set Infra Variables for Enabled Environments
  set_fact:
    aws_subnets: >
      {%- set aws_subnets = [] %}
      {%- set aws_subnets = aws_subnets + (aws_subnets_ls if 'ls' in limit_envs else []) %}
      {%- set aws_subnets = aws_subnets + (aws_subnets_ts if 'ts' in limit_envs else []) %}
      {%- set aws_subnets = aws_subnets + (aws_subnets_dp if 'dp' in limit_envs else []) %}
      {%- set aws_subnets = aws_subnets + (aws_subnets_pd if 'pd' in limit_envs else []) %}
      {{- aws_subnets }}
    aws_security_groups: >
      {%- set aws_security_groups = [] %}
      {%- set aws_security_groups = aws_security_groups + (aws_security_groups_ls if 'ls' in limit_envs else []) %}
      {%- set aws_security_groups = aws_security_groups + (aws_security_groups_ts if 'ts' in limit_envs else []) %}
      {%- set aws_security_groups = aws_security_groups + (aws_security_groups_dp if 'dp' in limit_envs else []) %}
      {%- set aws_security_groups = aws_security_groups + (aws_security_groups_pd if 'pd' in limit_envs else []) %}
      {{- aws_security_groups }}
    aws_vpcs: >
      {%- set aws_vpcs = [] %}
      {%- set aws_vpcs = aws_vpcs + (aws_vpcs_ls if 'ls' in limit_envs else []) %}
      {%- set aws_vpcs = aws_vpcs + (aws_vpcs_ts if 'ts' in limit_envs else []) %}
      {%- set aws_vpcs = aws_vpcs + (aws_vpcs_dp if 'dp' in limit_envs else []) %}
      {%- set aws_vpcs = aws_vpcs + (aws_vpcs_pd if 'pd' in limit_envs else []) %}
      {{- aws_vpcs }}
    deployment_environments_by_env_name:
      ts: "{{ deployment_environment_ts }}"
      dp: "{{ deployment_environment_dp }}"
      pd: "{{ deployment_environment_pd }}"
    deployment_environments: >
      {%- set deployment_environments = [] %}
      {%- set deployment_environments = deployment_environments + ([deployment_environment_ts] if 'ts' in limit_envs else []) %}
      {%- set deployment_environments = deployment_environments + ([deployment_environment_dp] if 'dp' in limit_envs else []) %}
      {%- set deployment_environments = deployment_environments + ([deployment_environment_pd] if 'pd' in limit_envs else []) %}
      {{- deployment_environments }}
  delegate_to: localhost
  run_once: true

- name: Lookup EC2 Subnets
  ec2_vpc_subnet_facts:
    region: "{{ aws_region }}"
    filters:
      "tag:Name": "{{ item.subnet_name }}"
  # This module doesn't return subnet names/tags, so we have to query
  # separately for each subnet (so we can build those associations
  # ourselves).
  with_items: "{{ aws_subnets }}"
  register: ec2_vpc_subnets
  delegate_to: localhost
  run_once: true
# Add a 'facts' value to each `aws_subnet` entry, with the subnet details from `ec2_vpc_subnets`.
- name: Combine Subnet Specifications with Data From AWS API
  set_fact:
    aws_subnet_with_facts: "{{ item | combine({ 'facts': (ec2_vpc_subnets.results | selectattr('item.subnet_name', 'equalto', item.subnet_name) | list)[0].subnets[0] }) }}"
  with_items: "{{ aws_subnets }}"
  register: aws_subnets
  delegate_to: localhost
  run_once: true
- name: Fix Subnet Data Scope
  set_fact:
    aws_subnets: "{{ aws_subnets.results | map(attribute='ansible_facts.aws_subnet_with_facts') | list }}"
  delegate_to: localhost
  run_once: true

- name: Initialize Lists of ELB Subnets by Env
  set_fact:
    elb_subnets_by_env:
      ts: []
      dp: []
      pd: []
  delegate_to: localhost
  run_once: true
- name: Populate Lists of ELB Subnets by Env
  set_fact:
    elb_subnets_by_env:
      ts: "{{ elb_subnets_by_env.ts if ((item.vpc_name != deployment_environment_ts.data_server_elb.vpc_name) or ('-pub-' not in item.subnet_name)) else (elb_subnets_by_env.ts + [item]) }}"
      dp: "{{ elb_subnets_by_env.dp if ((item.vpc_name != deployment_environment_dp.data_server_elb.vpc_name) or ('-pub-' not in item.subnet_name)) else (elb_subnets_by_env.dp + [item]) }}"
      pd: "{{ elb_subnets_by_env.pd if ((item.vpc_name != deployment_environment_pd.data_server_elb.vpc_name) or ('-pub-' not in item.subnet_name)) else (elb_subnets_by_env.pd + [item]) }}"
  with_items: "{{ aws_subnets }}"
  delegate_to: localhost
  run_once: true

- name: Query AWS API for EC2 Instances
  ec2_instance_facts:
    region: "{{ aws_region }}"
  register: ec2_instances
  delegate_to: localhost
  run_once: true
- name: Initialize Lists of Data Servers by Env
  set_fact:
    data_servers_by_env:
      ts: []
      dp: []
      pd: []
  delegate_to: localhost
  run_once: true
- name: Populate Lists of Data Servers by Env
  set_fact:
    data_servers_by_env:
      ts: "{{ data_servers_by_env.ts if (item.tags.Name) not in deployment_environment_ts.data_server_elb.ec2_instance_names else (data_servers_by_env.ts + [item]) }}"
      dp: "{{ data_servers_by_env.dp if (item.tags.Name) not in deployment_environment_dp.data_server_elb.ec2_instance_names else (data_servers_by_env.dp + [item]) }}"
      pd: "{{ data_servers_by_env.pd if (item.tags.Name) not in deployment_environment_pd.data_server_elb.ec2_instance_names else (data_servers_by_env.pd + [item]) }}"
  with_items: "{{ ec2_instances.instances }}"
  delegate_to: localhost
  run_once: true
- name: Initialize Dict of Data Servers with Env
  set_fact:
    data_servers_with_env: {}
  delegate_to: localhost
  run_once: true
- name: Populate Dict of Data Servers with Env
  set_fact:
    data_servers_with_env: "{{ data_servers_with_env | combine( { item.private_ip_address: { 'instance': item, 'env_name': 'ts' if (item.tags.Name) in deployment_environment_ts.data_server_elb.ec2_instance_names else 'dp' if (item.tags.Name) in deployment_environment_dp.data_server_elb.ec2_instance_names else 'pd' if (item.tags.Name) in deployment_environment_pd.data_server_elb.ec2_instance_names else 'unknown' } } ) }}"
  with_items: "{{ ec2_instances.instances }}"
  delegate_to: localhost
  run_once: true
